TVM Notes

References
http://www.cs.virginia.edu/~evans/cs216/guides/x86.html
http://ref.x86asm.net/coder.html
https://en.wikibooks.org/wiki/X86_Assembly


tony's bug
mov word r2,word [r1] -- doesnt work
mov word r1,word [r1] -- compiles but no effect


[*] Made a major change to the way the virtual machine is structured.
==
[*] fixed move word from register to memory. Ex:
	mov r1, word 512
	mov word [10], word r1
	mov word r2, word [10]
[*] added move word/byte from address to register address ex:
	move byte [r3], byte [var1]
[*] mov r1, [r1]  (note same reg)
[*] bug near line 110 in display? ... can't see a problem.
[*] quick and dirty register display on web page
[*] added mov address of register etc to register
[*] fixed getSource when retrieving words (bytes were back to front)
==
[*] rearranged memory map
[*] user data / code now starts at hw_programDataStart 0x11000
[*] Added shift left and right [shl and shr]
[*] added operations to clear various flags:
	clc=clear carry, clz=clear zero, cls=clear sign, clb=clear break
[*] add jump if carry clear - carry gets set if shift moves bit off the end.
==
[*] fix compare order
[*] add multiply and divide sys calls MUL=30, DIV=31
[*] add mouse coords at mem [505][506]
[*] add basic joystick (cursor keys and ctrs, shift) mapped to:
	up[510] down[511] left[512 right[513] fire1[514] fire2[515]
[*] fixed compare byte at address with byte (eg: cmp [511], 1)
==
[*] Allow comments using the ; character
[ ] Consume tab in web form -- how though?
[*] Make we form use fixed width font
[*] draw compile output to web page
[*] add basic input - cursor keys and mouse


[ ] add new opcodes:
	// Jumps
	[*] JE	equal
	[*] JNE	not equal
	[*] JG	greater
	[*] JGE	greater or equal
	[*] JL	less
	[*] JLE	less/equal
	// stack
	[*] push all regs
	[*] pop all regs
	// maths
	[*] SUB
	[*] mul (syscall)
	[*] div (syscall)
	[*] shl
	[*] shr
	// logic
	[ ] xor
	[ ] or

	// misc
	[ ] xchg

what are these?
	[ ] sa
	[ ] cwd
	[ ] sar
	[ ] in
	[ ] test



How to distinguish bytes and words inopcodes

mov byte [label], byte 123
push byte [addr]
pop word [addr]
cmp byte[addr], byte 0xff



Examples of new stuff:


// Divide syscall (sys 31)
// Mouse coords memory locasion [505],[506]
start:
mov r3,[505]  // Get mouse x pos
pushw r3
pushw word 32
sys 31        // divide mouse x by 32
popw r3       // retrieve result
mov [503],r3  // put result into BG colour
jmp start



New operand style (2 operand instructions)
[opcode 6bit 64][operand 5bit 32][operand 5bit 32]
each 5 bit operand can represent:
0-7		8	r1 r2 r3 r4 r5 r6 r7 r8
8-15	8	byte at address of [reg 0-8]
16-23	8	dword at address of [reg 0-8]
24-31	8	byte at address of [reg 0-8 + next word]
32-39	8	dword at address of [reg 0-8 + next word]
40		1	next byte literal
41		1	next dword literal
22		1	byte at address of [next dword]
23		1	dword at address of [next dword]
24		1	[sp]
25		1	[sp+ next word]
26		1	flags
27		1	pc
28		1	sp
29
30
31
128-255 - packed literals.

Alternatively... if we use 3 bytes then visualising the assembler will be a lot cleaner...
If we use a full byte, we can have some nice packed literals -1,0,1,2,4,8 etc..
And lot's of registers...

Tony's literals:
1,60,106,0,2,256,0xa,0x9,7,16,0,6,7,0xf,32,1024,0xff00,0x1000



* either opcodes can be for byte/word or the operand can specify.


mov [221112],byte 1
mov [221112],word 1
push word 32
push byte 13
